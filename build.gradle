import groovy.json.JsonSlurper
import org.yaml.snakeyaml.DumperOptions
import org.yaml.snakeyaml.Yaml

buildscript {

    repositories {
        maven {
            url "${artifactory_contextUrl}/local-gradle-bns"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "${artifactory_contextUrl}/plugins-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "${artifactory_contextUrl}/jcenter"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.13.RELEASE"
        classpath "com.bns.accp.gradle:accelerator-pipeline-plugin:1.2.1"
        classpath "org.yaml:snakeyaml:1.17+"
    }
}

plugins {
    id "net.ltgt.apt" version "0.15"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bns.accp.accelerator-pipeline'


group = 'codfjump'
description = 'jump_api_integration_test'
version = '1.0'

jar {
    manifest {
        attributes 'Implementation-Title': project.description,
                'Implementation-Version': project.hasProperty('artifactVersion') ? project.artifactVersion : project.version
    }
}

acceleratorPipeline {
    projectGroup = 'codfjump'
}

repositories {

    mavenLocal()

    maven {
        url "${artifactory_contextUrl}/jcenter-cache"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }

    maven {
        url "${artifactory_contextUrl}/virtual-release-bns"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'org.aeonbits.owner:owner-java8:1.0.9'
    compile 'org.slf4j:slf4j-simple:1.7.7'
    compile 'net.serenity-bdd:serenity-core:2.0.30'
    compile 'net.serenity-bdd:serenity-junit:2.0.30'
    compile 'net.serenity-bdd:serenity-screenplay:2.0.30'
    compile 'net.serenity-bdd:serenity-cucumber:1.9.22'
    compile 'net.serenity-bdd:serenity-screenplay-rest:2.0.30'
    compile 'junit:junit:4.12'
    compile 'org.assertj:assertj-core:3.6.2'
    compile 'org.hamcrest:hamcrest-all:1.3'
    compile 'io.rest-assured:json-schema-validator:3.0.7'
    compile 'com.googlecode.json-simple:json-simple:1.1'
    compile 'org.projectlombok:lombok:1.16.18'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    compile 'org.hibernate:hibernate-core:5.2.16.Final'
    compile 'com.microsoft.sqlserver:mssql-jdbc:7.1.3.jre8-preview'
    compile 'org.jasypt:jasypt:1.9.2'
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = "${artifactory_projectRepoKey}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
    }
    resolve {
        repository {
            repoKey = 'virtual-release-bns'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/*Application*',
                              '**/annotation/*',
                              '**/config/*',
                              '**/constant/*',
                              '**/domain/*',
                              '**/mapper/*',
                              '**/dto/*',
                              '**/dto/**/*',
                              '**/exception/*',
                              '**/exception/**/*',
                              '**/model/*',
                              '**/proxy/*',
                              '**/properties/*'
                    ])
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['**.*Application*',
                        '**.annotation.*',
                        '**.config.*',
                        '**.constant.*',
                        '**.domain.*',
                        '**.mapper.*',
                        '**.dto.*',
                        '**.dto.**.*',
                        '**.exception.*',
                        '**.exception.**.*',
                        '**.model.*',
                        '**.proxy.*',
                        '**.properties.*'
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
}

afterEvaluate {
    sonarqube {
        properties {
            properties["sonar.jacoco.reportPath"] = "${buildDir}/jacoco/test.exec"
            properties["sonar.jacoco.itReportPath"] = "${buildDir}/jacoco/integrationTest.exec"
            properties["sonar.coverage.exclusions"] =
                    "**/*Application*," +
                            "**/annotation/*," +
                            "**/config/*," +
                            "**/constant/*," +
                            "**/domain/*," +
                            "**/mapper/*," +
                            "**/dto/*," +
                            "**/dto/**/*," +
                            "**/exception/*," +
                            "**/exception/**/*," +
                            "**/model/*," +
                            "**/proxy/*," +
                            "**/properties/*"
        }
    }
}
